cmake_minimum_required( VERSION 3.15 )

set( namespace "Bergermeister" )
project( "Network"
    VERSION 0.0.1
    DESCRIPTION "Bergermeister Home Network Support Library"
)

if( NOT CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME )
    message( STATUS "This project has a top-level one called [${CMAKE_PROJECT_NAME}]" )
else( )
    message( STATUS "This project is a top-level one" )
endif( )

set( CMAKE_CXX_STANDARD 11 )
set( CMAKE_CXX_STANDARD_REQUIRED ON )

add_library( ${PROJECT_NAME} STATIC )

target_sources( ${PROJECT_NAME}
    PRIVATE
        src/Network/IPEndpoint.cpp
        src/Network/UDPSocket.cpp
        src/Network/UDPClient.cpp
)

# without it public headers won't get installed
set( public_headers
     src/Network/IPEndpoint.h
     src/Network/UDPSocket.h
     src/Network/UDPClient.h
)

target_include_directories( ${PROJECT_NAME}
    PRIVATE
        # where the library itself will look for its internal headers
        ${CMAKE_CURRENT_SOURCE_DIR}/src
    PUBLIC
        # where top-level project will look for the library's public headers
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
        # where external projects will look for the library's public headers
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

# not for MSVC
if( CMAKE_COMPILER_IS_GNUCXX )
    # compile options for this target only
    # treat warnings as errors
    target_compile_options( ${PROJECT_NAME} PRIVATE -Werror )
endif()

# where to find our CMake modules
set( CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib" )
message(STATUS "CMake module path: ${CMAKE_MODULE_PATH}")
include( Installing )
# install( DIRECTORY "src/" TYPE INCLUDE COMPONENT Network )